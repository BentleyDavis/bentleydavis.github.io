// ==UserScript==
// @name         Eventbrite Search to CSV
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  Return Eventbrite searches as a comma separated value file
// @author       Bentley Davis
// @match        https://www.eventbrite.com/d/*
// @grant        none
// ==/UserScript==


(function () {
    'use strict';

    // Your code here...
    let interceptors = [];

    function interceptor(fetch, ...args) {
        const reversedInterceptors = interceptors.reduce((array, interceptor) => [interceptor].concat(array), []);
        let promise = Promise.resolve(args);

        // Register request interceptors
        reversedInterceptors.forEach(({ request, requestError }) => {
            if (request || requestError) {
                promise = promise.then(args => request(...args), requestError);
            }
        });

        // Register fetch call
        promise = promise.then(args => fetch(...args));

        // Register response interceptors
        reversedInterceptors.forEach(({ response, responseError }) => {
            if (response || responseError) {
                promise = promise.then(response, responseError);
            }
        });

        return promise;
    }

    function attach(env) {
        env.fetch = (function (fetch) {
            return function (...args) {
                return interceptor(fetch, ...args);
            };
        })(env.fetch);

        return {
            register: function (interceptor) {
                interceptors.push(interceptor);
                return () => {
                    const index = interceptors.indexOf(interceptor);
                    if (index >= 0) {
                        interceptors.splice(index, 1);
                    }
                };
            },
            clear: function () {
                interceptors = [];
            }
        };
    };

    attach(window).register({
        response(response) {

            if (!response.url.includes("/search/")) {
                return response
            }

            response.json2 = response.json;

            response.json = () => {
                return response.json2().then(data => {
                    console.log(data);
                    parsEvents(data.events.results);
                    return data;
                });
            }
            return response
        }
    })

    function parsEvents(events) {

        let csv = '"Event Title","Event External URL","Event Description Short","Event Image","Start Date & Time","End Date & Time"'
            + '\r\n';
        for (const event of events) {
            csv += '"'
                + event.name
                + '","'
                + event.url
                + '","'
                + event.summary
                + '","'
                + event.image.url
                + '","'
                + event.start_date + ' ' + event.start_time
                + '","'
                + event.end_date + ' ' + event.end_time
                + '"\r\n';
        }
        download("data.csv", csv);
        console.log(csv);
    }

    function download(filename, text) {
        var element = document.createElement('a');
        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
        element.setAttribute('download', filename);

        element.style.display = 'none';
        document.body.appendChild(element);

        element.click();

        document.body.removeChild(element);
    }

})();